version: 1
disable_existing_loggers: False

formatters:
  simple:
    format: "[%(levelname)s] %(message)s"
  detailed:
    format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
  color:
    format: "\033[1;32m%(asctime)s\033[0m \033[1;34m[%(levelname)s]\033[0m %(name)s: %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"
  timestamped:
    format: "[%(asctime)s] [%(levelname)s] %(message)s"
    datefmt: "%Y-%m-%d %H:%M:%S"

handlers:
  console:
    class: logging.StreamHandler
    level: DEBUG
    formatter: color
    stream: ext://sys.stdout

  file:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: timestamped
    filename: logs/app.log
    when: midnight
    backupCount: 7
    encoding: utf8
  overwrite_file:
    class: logging.FileHandler
    level: INFO
    formatter: timestamped
    filename: logs/trading.log
    mode: w
    encoding: utf8

loggers:
  myapp:
    level: DEBUG
    handlers: [console, file]
    propagate: no
  trading:
    level: INFO
    handlers: [console, overwrite_file]
    propagate: no

root:
  level: WARNING
  handlers: [console]

code:
  example: 